{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedPost","selectedPost","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","setFilteredTodos","useState","query","setQuery","filterBy","setFilterBy","useEffect","newTodos","sort","fiteredTodos","filter","toLowerCase","includes","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","selectedUser","setSelectedUser","user","href","email","name","App","setTodos","filteredTodos","todosFromServer","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1cae76b7.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedPost: (selectedPerson: Todo) => void,\n  selectedPost: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedPost,\n  selectedPost,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className={cn({\n            'has-background-info-light': selectedPost?.id === todo.id,\n          })}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectedPost(todo)}\n            >\n              <span className=\"icon\">\n                <i className={cn('far', {\n                  'fa-eye': !selectedPost || selectedPost.id !== todo.id,\n                  'fa-eye-slash': selectedPost && selectedPost.id === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\nconst filter = (todos: Todo[], sort: string, query: string) => {\n  let fiteredTodos = [...todos];\n\n  switch (sort) {\n    case 'active':\n      fiteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      fiteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  if (query) {\n    fiteredTodos = fiteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  return fiteredTodos;\n};\n\ntype Props = {\n  todos: Todo[],\n  setFilteredTodos: React.Dispatch<React.SetStateAction<Todo[]>>,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  todos,\n  setFilteredTodos,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState('');\n\n  useEffect(() => {\n    const newTodos = filter(todos, filterBy, query);\n\n    setFilteredTodos(newTodos);\n  }, [filterBy, query, todos, setFilteredTodos]);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => setFilterBy(e.target.value)}\n          >\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <>\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setQuery('')}\n              />\n            </span>\n          </>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  setSelectedPost: (selectedPerson: Todo | null) => void,\n  selectedPost: Todo | null,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setSelectedPost,\n  selectedPost,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  if (selectedPost) {\n    getUser(selectedPost.userId)\n      .then(user => setSelectedUser(user));\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedPost?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedPost(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedPost?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-success': selectedPost?.completed,\n                'has-text-danger': !selectedPost?.completed,\n              })}\n              >\n                {selectedPost?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n      setFilteredTodos(todosFromServer);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                todos={todos}\n                setFilteredTodos={setFilteredTodos}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {todos.length !== 0\n                ? (\n                  <TodoList\n                    todos={filteredTodos}\n                    setSelectedPost={setSelectedPost}\n                    selectedPost={selectedPost}\n                  />\n                )\n                : (<Loader />)}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedPost && (\n        <TodoModal\n          setSelectedPost={setSelectedPost}\n          selectedPost={selectedPost}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}