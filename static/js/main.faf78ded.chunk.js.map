{"version":3,"sources":["types/Filters.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers.tsx","index.tsx"],"names":["Filters","TodoList","todos","setSelectedPost","selectedPost","isSelected","todo","id","className","map","cn","completed","title","type","onClick","TodoFilter","query","setQuery","setFilterBy","onChange","event","target","value","Object","keys","filterCategory","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","selectedUser","setSelectedUser","isLoading","setIsLoading","errorMessage","setErrorMessage","useEffect","userId","user","catch","error","finally","href","email","name","App","setTodos","all","filterBy","todosFromServer","filteredTodos","fiteredTodos","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faf78ded.chunk.js","sourcesContent":["export enum Filters {\n  'all' = 'all',\n  'active' = 'active',\n  'completed' = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedPost: (selectedPerson: Todo) => void,\n  selectedPost: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedPost,\n  selectedPost,\n}) => {\n  const isSelected = (todo: Todo) => selectedPost?.id === todo.id;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': isSelected(todo),\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedPost(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn('far', {\n                    'fa-eye': !isSelected(todo),\n                    'fa-eye-slash': isSelected(todo),\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { Filters } from '../../types/Filters';\n\ntype Props = {\n  query: string,\n  setQuery: React.Dispatch<React.SetStateAction<string>>,\n  setFilterBy: React.Dispatch<React.SetStateAction<Filters>>\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setQuery,\n  setFilterBy,\n}) => {\n  const handleFilterBy = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterBy(event.target.value as Filters);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterBy}\n            className=\"is-capitalized\"\n          >\n            {Object.keys(Filters).map(filterCategory => (\n              <option\n                value={filterCategory}\n                key={filterCategory}\n                className=\"is-capitalized\"\n              >\n                {filterCategory}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <>\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => setQuery('')}\n              />\n            </span>\n          </>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  setSelectedPost: (selectedPerson: Todo | null) => void,\n  selectedPost: Todo | null,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  setSelectedPost,\n  selectedPost,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedPost) {\n      getUser(selectedPost.userId)\n        .then(user => setSelectedUser(user))\n        .catch(error => setErrorMessage(error))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedPost?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => setSelectedPost(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            {errorMessage ? (\n              <p className=\"block\">\n                {errorMessage}\n              </p>\n            ) : (\n              <div>\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedPost?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  <strong className={cn({\n                    'has-text-success': selectedPost?.completed,\n                    'has-text-danger': !selectedPost?.completed,\n                  })}\n                  >\n                    {selectedPost?.completed ? 'Done' : 'Planned'}\n                  </strong>\n\n                  {' by '}\n\n                  <a href={`mailto:${selectedUser?.email}`}>\n                    {selectedUser?.name}\n                  </a>\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filters } from './types/Filters';\nimport { filter } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterBy, setFilterBy] = useState<Filters>(Filters.all);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .catch(error => setErrorMessage(error));\n  }, []);\n\n  const filteredTodos = filter(todos, filterBy, query);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                setQuery={setQuery}\n                setFilterBy={setFilterBy}\n              />\n            </div>\n\n            {errorMessage\n              ? (\n                <p className=\"block\">\n                  {errorMessage}\n                </p>\n              )\n              : (\n                <div className=\"block\">\n\n                  {todos.length\n                    ? (\n                      <TodoList\n                        todos={filteredTodos}\n                        setSelectedPost={setSelectedPost}\n                        selectedPost={selectedPost}\n                      />\n                    )\n                    : (<Loader />)}\n                </div>\n              )}\n\n          </div>\n        </div>\n      </div>\n      {selectedPost && (\n        <TodoModal\n          setSelectedPost={setSelectedPost}\n          selectedPost={selectedPost}\n        />\n      )}\n    </>\n  );\n};\n","import { Filters } from './types/Filters';\nimport { Todo } from './types/Todo';\n\nexport const filter = (\n  todos: Todo[],\n  filterBy: Filters,\n  query: string,\n) => {\n  let fiteredTodos = [...todos];\n\n  switch (filterBy) {\n    case 'active':\n      fiteredTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case 'completed':\n      fiteredTodos = todos.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  if (query) {\n    fiteredTodos = fiteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  return fiteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './App.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}